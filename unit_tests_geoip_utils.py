import pytest
from unittest.mock import MagicMock
from geoip_utils import add_cities, make_cities_dict, get_ip_info_result

@pytest.mark.parametrize(
    "new_text_dict, result_copy, line, match, country_id, city, target_flag, expected_new_text_dict, expected_result_copy",
    [
        (
            {'UA': {'head': '\nüá∫üá¶ UA (–£–∫—Ä–∞–∏–Ω–∞)', 'cities': {}}},
            [],
            '91.124.18. - 107 –ø—Ä–æ–∫—Å–∏',
            '91.124.18',
            'UA',
            '–ö–∏–µ–≤',
            False,
            {'UA': {'head': '\nüá∫üá¶ UA (–£–∫—Ä–∞–∏–Ω–∞)', 'cities': {'–ö–∏–µ–≤': ['<code>91.124.18</code>. - 107 –ø—Ä–æ–∫—Å–∏']}}},
            []
        ),
        ({'UA': {'head': '\nüá∫üá¶ UA (–£–∫—Ä–∞–∏–Ω–∞)', 'cities': {}}},
            [],
            '89.251.31.3 - 87 –ø—Ä–æ–∫—Å–∏',
            '89.251.31.3',
            'UA',
            '–ö–∏–µ–≤',
            False,
            {'UA': {'head': '\nüá∫üá¶ UA (–£–∫—Ä–∞–∏–Ω–∞)', 'cities': {'–ö–∏–µ–≤': ['<code>89.251.31.3</code> - 87 –ø—Ä–æ–∫—Å–∏']}}},
            []
        )
    ]
)
@pytest.mark.asyncio
async def test_add_cities(new_text_dict, result_copy, line, match, country_id, city, target_flag, expected_new_text_dict, expected_result_copy):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ add_cities —Å —Ä–∞–∑–Ω—ã–º–∏ –≤—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    # –≤—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    await add_cities(new_text_dict, result_copy, line, match, country_id, city, target_flag)

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
    assert new_text_dict == expected_new_text_dict
    assert result_copy == expected_result_copy

@pytest.mark.parametrize(
    "match, city_response, new_text_dict, target_flag, target_country_iso, result_copy, line, expected_new_text_dict",
    [
        # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ª—É—á–∞–π, –≤–∞–ª–∏–¥–Ω—ã–π IP-–∞–¥—Ä–µ—Å, new_text_dict –ø—É—Å—Ç
        (
            '123.123.123.123',
            {"iso_code": "CN", "country_ru": "–ö–∏—Ç–∞–π", "city_ru": "–ü–µ–∫–∏–Ω"},
            {},
            False,
            None,
            [],
            '123.123.123.123',
            {'CN': {'head': '\nüá®üá≥ CN (–ö–∏—Ç–∞–π)', 'cities': {'–ü–µ–∫–∏–Ω': ['<code>123.123.123.123</code>']}}}
        ),
        # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ª—É—á–∞–π, –≤–∞–ª–∏–¥–Ω—ã–π IP-–∞–¥—Ä–µ—Å, –≤ new_text_dict –æ–¥–∏–Ω IP-–∞–¥—Ä–µ—Å
        (
            '3.3.3.3',
            {"iso_code": "US", "country_ru": "–°–®–ê", "city_ru": "–ê—à–±–µ—Ä–Ω"},
            {'CN': {'head': '\nüá®üá≥ CN (–ö–∏—Ç–∞–π)', 'cities': {'–ü–µ–∫–∏–Ω': ['<code>123.123.123.123</code>']}}},
            False,
            None,
            [],
            '3.3.3.3',
            {'CN': {'head': '\nüá®üá≥ CN (–ö–∏—Ç–∞–π)', 'cities': {'–ü–µ–∫–∏–Ω': ['<code>123.123.123.123</code>']}}, 'US': {'head': '\nüá∫üá∏ US (–°–®–ê)', 'cities': {'–ê—à–±–µ—Ä–Ω': ['<code>3.3.3.3</code>']}}}
        ),
        # –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π IP-–∞–¥—Ä–µ—Å
        (
            '1.1.1.1',
            {"iso_code": "Unknown", "country_ru": "Unknown", "city_ru": "Unknown"},
            {},
            False,
            None,
            [],
            '1.1.1.1',
            {'Unknown': {'cities': {'\n‚ùåInvalid IP': ['<b><code>1.1.1.1</code></b>']}}}
        ),
        # –≤ new_text_dict –µ—Å—Ç—å IP-–∞–¥—Ä–µ—Å —Ç–æ–≥–æ –∂–µ –≥–æ—Ä–æ–¥–∞
        (
            '91.124.1',
            {"iso_code": "GB", "country_ru": "–ë—Ä–∏—Ç–∞–Ω–∏—è", "city_ru": "–õ–æ–Ω–¥–æ–Ω"},
            {'GB': {'head': '\nüá¨üáß GB (–ë—Ä–∏—Ç–∞–Ω–∏—è)', 'cities': {'–õ–æ–Ω–¥–æ–Ω': ['<code>91.124.19</code>']}}},
            False,
            None,
            [],
            '91.124.1',
            {'GB': {'head': '\nüá¨üáß GB (–ë—Ä–∏—Ç–∞–Ω–∏—è)', 'cities': {'–õ–æ–Ω–¥–æ–Ω': ['<code>91.124.19</code>', '<code>91.124.1</code>']}}},
        ),
        # –≤ new_text_dict –µ—Å—Ç—å —Ç–æ—Ç –∂–µ IP-–∞–¥—Ä–µ—Å
        (
            '91.124.19',
            {"iso_code": "GB", "country_ru": "–ë—Ä–∏—Ç–∞–Ω–∏—è", "city_ru": "–õ–æ–Ω–¥–æ–Ω"},
            {'GB': {'head': '\nüá¨üáß GB (–ë—Ä–∏—Ç–∞–Ω–∏—è)', 'cities': {'–õ–æ–Ω–¥–æ–Ω': ['<code>91.124.19</code>']}}},
            False,
            None,
            [],
            '91.124.19',
            {'GB': {'head': '\nüá¨üáß GB (–ë—Ä–∏—Ç–∞–Ω–∏—è)', 'cities': {'–õ–æ–Ω–¥–æ–Ω': ['<code>91.124.19</code>']}}},
        ),
        # –≤ new_text_dict –µ—Å—Ç—å IP-–∞–¥—Ä–µ—Å —Ç–æ–π –∂–µ —Å—Ç—Ä–∞–Ω—ã –¥—Ä—É–≥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
        (
            '62.204.52',
            {"iso_code": "UA", "country_ru": "–£–∫—Ä–∞–∏–Ω–∞", "city_ru": "–•–∞—Ä—å–∫–æ–≤"},
            {'UA': {'head': '\nüá∫üá¶ UA (–£–∫—Ä–∞–∏–Ω–∞)', 'cities': {'–ö–∏–µ–≤': ['<code>62.233.60</code>. - 74 –ø—Ä–æ–∫—Å–∏']}}},
            False,
            None,
            [],
            '62.204.52. - 68 –ø—Ä–æ–∫—Å–∏',
            {'UA': {'head': '\nüá∫üá¶ UA (–£–∫—Ä–∞–∏–Ω–∞)', 'cities': {'–ö–∏–µ–≤': ['<code>62.233.60</code>. - 74 –ø—Ä–æ–∫—Å–∏'], '–•–∞—Ä—å–∫–æ–≤': ['<code>62.204.52</code>. - 68 –ø—Ä–æ–∫—Å–∏']}}},
        ),
        # IP-–∞–¥—Ä–µ—Å, –≥–æ—Ä–æ–¥ –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        (
                '91.124.18',
                {"iso_code": "UA", "country_ru": "–£–∫—Ä–∞–∏–Ω–∞", "city_ru": "–ö–∏–µ–≤"},
                {},
                False,
                None,
                [],
                '91.124.18',
                {'UA': {'head': '\nüá∫üá¶ UA (–£–∫—Ä–∞–∏–Ω–∞)', 'cities': {'–ö–∏–µ–≤': ['<code>91.124.18</code>']}}}
        )
    ]
)
@pytest.mark.asyncio
async def test_make_cities_dict(match, city_response, new_text_dict, target_flag, target_country_iso, result_copy, line,
                                expected_new_text_dict):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ make_cities_dict —Å —Ä–∞–∑–Ω—ã–º–∏ –≤—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""

    mock_city_file = MagicMock()

    mock_city_file.city.return_value = MagicMock(
        country=MagicMock(
            iso_code=city_response["iso_code"],
            names={
                "ru": city_response["country_ru"],
                "en": "Ukraine"  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á "en" —Å –Ω—É–∂–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
            }
        ),
        city=MagicMock(
            names={"ru": city_response["city_ru"]}
        )
    )

    # –≤—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    await make_cities_dict(match, mock_city_file, new_text_dict, target_flag, target_country_iso, result_copy, line)

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
    assert new_text_dict == expected_new_text_dict

@pytest.mark.parametrize(
    "new_text_dict, result, expected_result",
    [
        # –æ–¥–∏–Ω IP-–∞–¥—Ä–µ—Å
        (
            {'UA': {'head': '\nüá∫üá¶ UA (–£–∫—Ä–∞–∏–Ω–∞)', 'cities': {'–ö–∏–µ–≤': ['<code>91.124.18</code>']}}},
            [],
            ['\nüá∫üá¶ UA (–£–∫—Ä–∞–∏–Ω–∞)', '–ö–∏–µ–≤', '<code>91.124.18</code>']
        ),
        # –Ω–µ—Å–∫–æ–ª—å–∫–æ IP-–∞–¥—Ä–µ—Å–æ–≤
        (
            {'UA': {'head': '\nüá∫üá¶ UA (–£–∫—Ä–∞–∏–Ω–∞)', 'cities': {'–ö–∏–µ–≤': ['<code>91.124.18</code>']}}, 'GB': {'head': '\nüá¨üáß GB (–ë—Ä–∏—Ç–∞–Ω–∏—è)',
            'cities': {'–°–µ—Ä–±–∏—Ç–æ–Ω': ['<code>91.125.55</code>']}}, 'Unknown': {'cities': {'\n‚ùåInvalid IP': ['<b><code>1.1.1.1</code></b>']}},
             'US': {'head': '\nüá∫üá∏ US (–°–®–ê)', 'cities': {'–ê—à–±–µ—Ä–Ω': ['<code>3.3.3.3</code>']}}},
            [],
            ['\nüá∫üá¶ UA (–£–∫—Ä–∞–∏–Ω–∞)', '–ö–∏–µ–≤', '<code>91.124.18</code>', '\nüá¨üáß GB (–ë—Ä–∏—Ç–∞–Ω–∏—è)', '–°–µ—Ä–±–∏—Ç–æ–Ω', '<code>91.125.55</code>',
            '\n‚ùåInvalid IP', '<b><code>1.1.1.1</code></b>', '\nüá∫üá∏ US (–°–®–ê)', '–ê—à–±–µ—Ä–Ω', '<code>3.3.3.3</code>']
        ),
        (
            {'UA': {'head': '\nüá∫üá¶ UA (–£–∫—Ä–∞–∏–Ω–∞)', 'cities': {'–ö–∏–µ–≤': ['<code>91.124.18</code> 91.125.55 1.1.1.1 3.3.3.3']}},
            'GB': {'head': '\nüá¨üáß GB (–ë—Ä–∏—Ç–∞–Ω–∏—è)', 'cities': {'–°–µ—Ä–±–∏—Ç–æ–Ω': ['91.124.18 <code>91.125.55</code> 1.1.1.1 3.3.3.3']}},
             'Unknown': {'cities': {'\n‚ùåInvalid IP': ['91.124.18 91.125.55 <b><code>1.1.1.1</code></b> 3.3.3.3']}},
             'US': {'head': '\nüá∫üá∏ US (–°–®–ê)', 'cities': {'–ê—à–±–µ—Ä–Ω': ['91.124.18 91.125.55 1.1.1.1 <code>3.3.3.3</code>']}}},
            [],
            ['\nüá∫üá¶ UA (–£–∫—Ä–∞–∏–Ω–∞)', '–ö–∏–µ–≤', '<code>91.124.18</code> 91.125.55 1.1.1.1 3.3.3.3', '\nüá¨üáß GB (–ë—Ä–∏—Ç–∞–Ω–∏—è)', '–°–µ—Ä–±–∏—Ç–æ–Ω',
             '91.124.18 <code>91.125.55</code> 1.1.1.1 3.3.3.3', '\n‚ùåInvalid IP', '91.124.18 91.125.55 <b><code>1.1.1.1</code></b> 3.3.3.3',
             '\nüá∫üá∏ US (–°–®–ê)', '–ê—à–±–µ—Ä–Ω', '91.124.18 91.125.55 1.1.1.1 <code>3.3.3.3</code>']
        )
    ]
)
@pytest.mark.asyncio
async def test_get_ip_info_result(new_text_dict, result, expected_result):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ add_cities —Å —Ä–∞–∑–Ω—ã–º–∏ –≤—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    # –≤—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    await get_ip_info_result(new_text_dict, result)

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
    assert result == expected_result