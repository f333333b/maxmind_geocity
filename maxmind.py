import os
import re
import asyncio
import geoip2.database
import geoip2.errors
import aiohttp
import countryflag
import logging
import tarfile
import shutil
import tempfile
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime, timedelta
from capitals import capitals
from itertools import chain

# –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')
LICENSE_KEY = os.getenv('LICENSE_KEY')
bot = Bot(token=TOKEN)
dp = Dispatcher()
database_filename = 'GeoLite2-City.mmdb'
url = (
    f"https://download.maxmind.com/app/geoip_download?"
    f"edition_id=GeoLite2-City&license_key={LICENSE_KEY}"
    f"&suffix=tar.gz"
)
pattern = r'\d+\.\d+\.\d+'
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger()

# –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ –≤—Ä–µ–º—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db_update_lock = asyncio.Lock()

# –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_states = {}
user_data = {}

# –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è IP-–∞–¥—Ä–µ—Å–æ–≤
user_ips = {}

# —Å–ø—Ä–∞–≤–∫–∞
help_text = (
        "ü§ñ **–°–ø—Ä–∞–≤–∫–∞**\n\n"
        "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
        "<b>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä–∞–Ω—É –ø–æ IP-–∞–¥—Ä–µ—Å—É:</b>\n"
        "1. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π IP-–∞–¥—Ä–µ—Å(–∞). –ë–æ—Ç –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ IP-–∞–¥—Ä–µ—Å–æ–≤.\n"
        "2. –ù–∞–π–¥–µ–Ω–Ω—ã–µ IP-–∞–¥—Ä–µ—Å–∞ –≥—Ä—É–ø–ø–∏—Ä—É—é—Ç—Å—è –ø–æ —Å—Ç—Ä–∞–Ω–∞–º, –∞ –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–∞–Ω ‚Äî –ø–æ –≥–æ—Ä–æ–¥–∞–º.\n"
        "3. –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –ø–µ—Ä–≤—ã–º–∏ –¥–≤—É–º—è –±—É–∫–≤–∞–º–∏ —É–∫–∞–∑–∞–Ω ISO-–∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, \"US\" –¥–ª—è –°–®–ê), IP-–∞–¥—Ä–µ—Å–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω—ã –±—É–¥—É—Ç –≤—ã–≤–µ–¥–µ–Ω—ã –ø–µ—Ä–≤—ã–º–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–º —Å–ø–∏—Å–∫–µ.\n"
        "4. –ö–∞–∂–¥—ã–π IP-–∞–¥—Ä–µ—Å –∫–ª–∏–∫–∞–±–µ–ª–µ–Ω ‚Äî –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:</b>\n"
        "\n"
        "US\n"
        "–°–µ—Ä–≤–µ—Ä ‚Ññ36 (35 –ø—Ä–æ–∫—Å–∏, 5 –ø–æ–¥—Å–µ—Ç–µ–π):\n"
        "171.22.76. - 12 –ø—Ä–æ–∫—Å–∏\n"
        "102.129.221. - 7 –ø—Ä–æ–∫—Å–∏\n"
        "181.214.117. - 6 –ø—Ä–æ–∫—Å–∏\n"
        "–°–µ—Ä–≤–µ—Ä ‚Ññ188 (30 –ø—Ä–æ–∫—Å–∏, 2 –ø–æ–¥—Å–µ—Ç–µ–π):\n"
        "195.96.157. - 18 –ø—Ä–æ–∫—Å–∏\n"
        "88.216.43. - 12 –ø—Ä–æ–∫—Å–∏\n"
        "–°–µ—Ä–≤–µ—Ä ‚Ññ193 (9 –ø—Ä–æ–∫—Å–∏, 1 –ø–æ–¥—Å–µ—Ç–µ–π):\n"
        "176.100.44. - 9 –ø—Ä–æ–∫—Å–∏\n"
        "\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:</b>\n"
        "\n"
        "üá∫üá∏ US (–°–®–ê)\n"
        "–î–∂—ç–∫—Å–æ–Ω–≤–∏–ª–ª\n"
        "171.22.76. - 12 –ø—Ä–æ–∫—Å–∏\n"
        "–í–∞—à–∏–Ω–≥—Ç–æ–Ω\n"
        "102.129.221. - 7 –ø—Ä–æ–∫—Å–∏\n"
        "–°–∞–∫—Ä–∞–º–µ–Ω—Ç–æ\n"
        "176.100.44. - 9 –ø—Ä–æ–∫—Å–∏\n\n"
        "üá¶üá™ AE (–û–ê–≠)\n"
        "–ê–±—É-–î–∞–±–∏\n"
        "181.214.117. - 6 –ø—Ä–æ–∫—Å–∏\n\n"
        "üá∏üá® SC (–°–µ–π—à–µ–ª—å—Å–∫–∏–µ –æ-–≤–∞)\n"
        "–í–∏–∫—Ç–æ—Ä–∏—è\n"
        "195.96.157. - 18 –ø—Ä–æ–∫—Å–∏\n\n"
        "üá±üáπ LT (–õ–∏—Ç–≤–∞)\n"
        "–í–∏–ª—å–Ω—é—Å\n"
        "88.216.43. - 12 –ø—Ä–æ–∫—Å–∏\n"
        "\n\n"
        "–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–Ω–æ–ø–∫–∞ <b>\"–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ IP-–∞–¥—Ä–µ—Å–∞\"</b>, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö IP-–∞–¥—Ä–µ—Å–æ–≤ —Å—Ç—Ä–∞–Ω—ã, ISO-–∫–æ–¥ –∫–æ—Ç–æ—Ä–æ–π –±—ã–ª –≤–≤–µ–¥–µ–Ω –≤ —Ç–µ–∫—Å—Ç–µ –∑–∞–ø—Ä–æ—Å–∞.\n"
        "–ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –±—ã–ª —É–∫–∞–∑–∞–Ω ISO-–∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã, –∫–æ–º–∞–Ω–¥–∞ –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ IP-–∞–¥—Ä–µ—Å–∞.\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä –≤—ã–≤–æ–¥–∞ –∫–Ω–æ–ø–∫–∏ \"–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ IP-–∞–¥—Ä–µ—Å–∞\":</b>\n"
        "\n"
        "171.22.76. - 12 –ø—Ä–æ–∫—Å–∏\n"
        "102.129.221. - 7 –ø—Ä–æ–∫—Å–∏\n"
        "181.214.117. - 6 –ø—Ä–æ–∫—Å–∏\n"
        "195.96.157. - 18 –ø—Ä–æ–∫—Å–∏\n"
        "88.216.43. - 12 –ø—Ä–æ–∫—Å–∏\n"
        "176.100.44. - 9 –ø—Ä–æ–∫—Å–∏\n"
        "\n\n"
        "<b>–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å IP:</b>\n"
        "1. –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º IP-–∞–¥—Ä–µ—Å–æ–≤.\n"
        "2. –í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–π —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º IP-–∞–¥—Ä–µ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞.\n"
        "3. –ë–æ—Ç –≤—ã–≤–µ–¥–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ IP-–∞–¥—Ä–µ—Å–æ–≤."
    )

# –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
start_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="/start")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

keyboard_choice = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä–∞–Ω—É –ø–æ IP-–∞–¥—Ä–µ—Å—É", callback_data="check_country")],
        [InlineKeyboardButton(text="–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å IP", callback_data="filter_ips_1")],
        [InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="help")]

    ]
)

keyboard_copy = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å IP-–∞–¥—Ä–µ—Å–∞ –ø–æ —Å—Ç—Ä–∞–Ω–µ", callback_data="copy_ips")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_choice")]
    ]
)

keyboard_back = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_choice")]
    ]
)

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã
async def download_database(user_id):
    await bot.send_message(chat_id=user_id, text="–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    user_states[user_id] = 'awaiting_database_update'
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                with open('database.tar.gz', 'wb') as file:
                    file.write(await response.read())
                with tarfile.open('database.tar.gz', 'r:gz') as archive:
                    with tempfile.TemporaryDirectory() as temp_dir:
                        target_file = None
                        for filename in archive.getnames():
                            if os.path.basename(filename) == database_filename:
                                archive.extract(filename, path=temp_dir)
                                target_file = os.path.join(temp_dir, filename)
                                break

                        if target_file and os.path.exists(target_file):
                            program_directory = os.path.dirname(os.path.abspath(__file__))
                            destination_path = os.path.join(program_directory, database_filename)
                            shutil.copy2(target_file, destination_path)
                            await bot.send_message(chat_id=user_id, text="–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
                        else:
                            logging.error(f"–§–∞–π–ª {database_filename} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞—Ä—Ö–∏–≤–µ.")
                            await bot.send_message(chat_id=user_id, text="–ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", reply_markup=keyboard_choice)
            else:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {response.status}")
    user_states[user_id] = 'back_to_choice'

# —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –±–∞–∑—ã –∏ –µ–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
async def is_update_needed(user_id):
    if not os.path.exists(database_filename):
        await download_database(user_id)
    else:
        existing_base_date = datetime.fromtimestamp(os.path.getmtime(database_filename))
        async with aiohttp.ClientSession() as session:
            async with session.head(url) as response:
                if "Last-Modified" in response.headers:
                    updated_base_date = response.headers["Last-Modified"]
                    formatted_updated_base_date = datetime.strptime(updated_base_date, "%a, %d %b %Y %H:%M:%S %Z")
                    if formatted_updated_base_date - existing_base_date > timedelta(weeks=1):
                        await download_database(user_id)

# —Ñ—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–æ–≤ IP-–∞–¥—Ä–µ—Å–æ–≤
async def to_filter_ips(first_input, second_input):
    first_list = re.findall(pattern, first_input)
    second_list = re.findall(pattern, second_input)

    return [ip for ip in first_list if ip not in second_list]

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è IP-–∞–¥—Ä–µ—Å–æ–≤
async def get_ip_info(text_input: str):
    all_ips = re.findall(pattern, text_input)
    target_country = text_input[:2]
    ip_list_text = text_input.splitlines()
    new_text_dict, result_copy = {}, []
    if all_ips:
        with (geoip2.database.Reader(database_filename) as city_file):
            for line in ip_list_text:
                match = re.search(pattern, line)
                if match:
                    ip_original = match.group()
                    ip = ip_original + '.0'
                    response = city_file.city(ip)
                    country_id = response.country.iso_code
                    country_ru = response.country.names.get('ru', '')
                    country_en = response.country.names.get('en', '')
                    city = response.city.names.get('ru', '')
                    if not city:
                        city = capitals[country_en]
                    flag = countryflag.getflag([country_id])
                    if text_input[:2].isalpha() and text_input[:2].isupper():
                        if target_country not in new_text_dict:
                            new_text_dict[target_country] = {'head': f'\n{countryflag.getflag([target_country])} {target_country}'}
                        if 'cities' not in new_text_dict[target_country]:
                            new_text_dict[target_country]['cities'] = {}
                    if country_id not in new_text_dict:
                        new_text_dict[country_id] = {'head': f'\n{flag} {country_id} ({country_ru})', 'cities': {}}
                    if target_country == country_id:
                        if country_ru not in new_text_dict[country_id]['head']:
                            new_text_dict[country_id]['head'] += f' ({country_ru})'
                        add_cities(new_text_dict, ip_original, result_copy, line, match, country_id, city, target_flag=True)
                    else:
                        add_cities(new_text_dict, ip_original, result_copy, line, match, country_id, city)
        result = []

    for ISO, v in new_text_dict.items():
        for country_dictionary, dictionary_content in v.items():
            if isinstance(dictionary_content, str):
                result.append(dictionary_content)
            elif isinstance(dictionary_content, dict):
                for city_name, v2 in dictionary_content.items():
                    result.append(city_name)
                    for ip_addresses in v2:
                        result.extend(ip_addresses if isinstance(ip_addresses, list) else [ip_addresses])
        return result, result_copy
    else:
        return [], []


# —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ —Å IP-–∞–¥—Ä–µ—Å–∞–º–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–µ —Å–ø–∏—Å–∫–∏
def add_cities(new_text_dict, ip_original, result_copy, line, match, country_id, city, target_flag=False):
    if city not in new_text_dict[country_id]['cities']:
        new_text_dict[country_id]['cities'][city] = []
    new_text_dict[country_id]['cities'][city].append(line.replace(match.group(), f"<code>{ip_original}</code>"))
    if target_flag:
        result_copy.append(line.replace(match.group(), f"<code>{ip_original}</code>"))

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def command_start_handler(message: Message):
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard_choice)

@dp.message(Command("help"))
async def command_help_handler(message: Message):
    await message.answer(help_text, parse_mode='HTML', reply_markup=keyboard_choice)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫
@dp.callback_query()
async def handle_callback(query: CallbackQuery):
    user_id = query.from_user.id

    # —Å—Ü–µ–Ω–∞—Ä–∏–π ‚Ññ 1: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ IP-–∞–¥—Ä–µ—Å—É
    if query.data == 'check_country':
        user_states[user_id] = 'awaiting_check_country'
        await query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å IP-–∞–¥—Ä–µ—Å–∞–º–∏, –∏ —è –æ–ø—Ä–µ–¥–µ–ª—é –∏—Ö –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–Ω–µ –±–æ–ª–µ–µ 50 IP-–∞–¥—Ä–µ—Å–æ–≤ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å).", reply_markup=keyboard_back)

    # —Å—Ü–µ–Ω–∞—Ä–∏–π ‚Ññ 2: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–æ–≤ IP-–∞–¥—Ä–µ—Å–æ–≤ (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫)
    elif query.data == 'filter_ips_1':
        user_states[user_id] = 'awaiting_filter_first_input'
        await query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ IP-–∞–¥—Ä–µ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å.", reply_markup=keyboard_back)

    # —Å—Ü–µ–Ω–∞—Ä–∏–π ‚Ññ 3: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–æ–≤ IP-–∞–¥—Ä–µ—Å–æ–≤ (–≤—Ç–æ—Ä–æ–π —Å–ø–∏—Å–æ–∫)
    elif query.data == 'filter_ips_2':
        user_states[user_id] = 'awaiting_filter_second_input'
        await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–π —Å–ø–∏—Å–æ–∫ IP-–∞–¥—Ä–µ—Å–æ–≤.", reply_markup=keyboard_back)

    # —Å—Ü–µ–Ω–∞—Ä–∏–π ‚Ññ 4: –≤—ã–≤–æ–¥ IP-–∞–¥—Ä–µ—Å–æ–≤ –≤ —Å—Ç–æ–ª–±–∏–∫ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    elif query.data == 'copy_ips':
        result_copy = user_data.get(user_id, [])
        if not result_copy:
            await query.message.answer("–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ IP-–∞–¥—Ä–µ—Å–æ–≤. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–Ω–æ–≤–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º ISO-–∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã.", reply_markup=keyboard_back)
        else:
            if all(isinstance(item, str) for item in result_copy):
                # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ IP-–∞–¥—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                formatted_ips = "\n".join(result_copy)
                await query.message.answer(formatted_ips, parse_mode="HTML", reply_markup=keyboard_back)
            else:
                flat_ips = list(chain.from_iterable(
                    item if isinstance(item, list) else [item] for item in result_copy))
                formatted_ips = "\n".join(flat_ips)
                await query.message.answer(formatted_ips, parse_mode="HTML", reply_markup=keyboard_back)
        user_states[user_id] = 'awaiting_check_country'

    # —Å—Ü–µ–Ω–∞—Ä–∏–π ‚Ññ 5: –ø–æ–º–æ—â—å (—Å–ø—Ä–∞–≤–∫–∞)
    elif query.data == "help":
        await query.message.answer(help_text, parse_mode="HTML", reply_markup=keyboard_choice)
    elif query.data == "back_to_choice":
        await query.message.answer(text='–í—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard_choice
        )

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_text(message: Message):
    user_id = message.from_user.id
    user_state = user_states.get(user_id)

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∫–∞—á–∞–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await is_update_needed(user_id)

    # —Å—Ü–µ–Ω–∞—Ä–∏–π ‚Ññ 1: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ IP-–∞–¥—Ä–µ—Å—É
    if user_state == 'awaiting_check_country':
        try:
            result, result_copy = await get_ip_info(message.text)
            if result:
                await message.answer('\n'.join(result), parse_mode="HTML", reply_markup=keyboard_copy)
                user_data[user_id] = result_copy
            else:
                await message.answer('–í–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç IP-–∞–¥—Ä–µ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.', parse_mode="HTML", reply_markup=keyboard_back)
        except Exception as e:
            await message.answer(f"–ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {e}.", reply_markup=keyboard_copy)
            user_states[user_id] = 'awaiting_check_country'
            logging.error(f"–ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {e}.\n–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞: {message.text}")

    # —Å—Ü–µ–Ω–∞—Ä–∏–π ‚Ññ 2: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–æ–≤ IP-–∞–¥—Ä–µ—Å–æ–≤ (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫)
    elif user_state == 'awaiting_filter_first_input':
        if re.findall(pattern, message.text):
            try:
                user_ips[user_id] = {'first': message.text}
                await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–π —Å–ø–∏—Å–æ–∫ IP-–∞–¥—Ä–µ—Å–æ–≤.", reply_markup=keyboard_back)
                user_states[user_id] = 'awaiting_filter_second_input'
            except Exception as e:
                await message.answer(f"–ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {e}.")
                logging.error(f"–ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {e}.\n–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞: {message.text}")
        else:
            await message.answer("–í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç IP-–∞–¥—Ä–µ—Å–∞.", reply_markup=keyboard_back)
            user_states[user_id] = 'awaiting_filter_first_input'

    # —Å—Ü–µ–Ω–∞—Ä–∏–π ‚Ññ 3: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–æ–≤ IP-–∞–¥—Ä–µ—Å–æ–≤ (–≤—Ç–æ—Ä–æ–π —Å–ø–∏—Å–æ–∫)
    elif user_state == 'awaiting_filter_second_input':
        second_ips = message.text
        if not re.findall(pattern, second_ips):
            await message.answer('–í—Ç–æ—Ä–æ–π —Å–ø–∏—Å–æ–∫ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç IP-–∞–¥—Ä–µ—Å–∞. –í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–π —Å–ø–∏—Å–æ–∫ –µ—â–µ —Ä–∞–∑.', reply_markup=keyboard_back)
        else:
            first_ips = user_ips.get(user_id, {}).get('first', '')
            if first_ips.strip():
                try:
                    filtered_ips = await to_filter_ips(first_ips, second_ips)
                    result_filtered_ips = '\n'.join(filtered_ips)
                    if filtered_ips:
                        await message.answer(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ IP-–∞–¥—Ä–µ—Å–∞:")
                        await message.answer(f"{result_filtered_ips}", reply_markup=keyboard_back)
                        user_states[user_id] = None  # —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                    else:
                        await message.answer(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç. IP-–∞–¥—Ä–µ—Å–æ–≤ –Ω–µ—Ç.", reply_markup=keyboard_back)
                        user_states[user_id] = 'awaiting_filter_first_input'
                except Exception as e:
                    await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ IP-–∞–¥—Ä–µ—Å–æ–≤: {e} –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=keyboard_back)
                    user_states[user_id] = 'awaiting_filter_first_input'
                    logging.error(f'–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}')
                    user_states[user_id] = None  # —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
            else:
                await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω –ø–µ—Ä–≤—ã–π —Å–ø–∏—Å–æ–∫ IP-–∞–¥—Ä–µ—Å–æ–≤.")
                user_states[user_id] = 'awaiting_filter_first_input'

    elif user_state == 'awaiting_database_update':
        await message.answer(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard_choice, parse_mode="HTML")

def setup_user_logger(user_id):
    log_filename = f"logs/{user_id}.log"
    os.makedirs(os.path.dirname(log_filename), exist_ok=True)
    logger = logging.getLogger(str(user_id))

    # –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å
    logger.propagate = False

    handler = logging.FileHandler(log_filename, encoding='utf-8')
    formatter = logging.Formatter('%(asctime)s - %(message)s\n', datefmt='%Y-%m-%d %H:%M:%S')
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    logger.setLevel(logging.INFO)
    return logger

async def main():
    # –∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    await dp.start_polling(bot)

asyncio.run(main())
